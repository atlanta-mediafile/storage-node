// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: grpc/file_service.proto

package fileservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	GetSingleFile(ctx context.Context, in *GetSingleFileRequest, opts ...grpc.CallOption) (*GetSingleFileResponse, error)
	UploadSingleFile(ctx context.Context, in *UploadSingleFileRequest, opts ...grpc.CallOption) (*UploadSingleFileResponse, error)
	DeleteSingleFile(ctx context.Context, in *DeleteSingleFileRequest, opts ...grpc.CallOption) (*DeleteSingleFileResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) GetSingleFile(ctx context.Context, in *GetSingleFileRequest, opts ...grpc.CallOption) (*GetSingleFileResponse, error) {
	out := new(GetSingleFileResponse)
	err := c.cc.Invoke(ctx, "/fileservice.FileService/GetSingleFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadSingleFile(ctx context.Context, in *UploadSingleFileRequest, opts ...grpc.CallOption) (*UploadSingleFileResponse, error) {
	out := new(UploadSingleFileResponse)
	err := c.cc.Invoke(ctx, "/fileservice.FileService/UploadSingleFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteSingleFile(ctx context.Context, in *DeleteSingleFileRequest, opts ...grpc.CallOption) (*DeleteSingleFileResponse, error) {
	out := new(DeleteSingleFileResponse)
	err := c.cc.Invoke(ctx, "/fileservice.FileService/DeleteSingleFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	GetSingleFile(context.Context, *GetSingleFileRequest) (*GetSingleFileResponse, error)
	UploadSingleFile(context.Context, *UploadSingleFileRequest) (*UploadSingleFileResponse, error)
	DeleteSingleFile(context.Context, *DeleteSingleFileRequest) (*DeleteSingleFileResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) GetSingleFile(context.Context, *GetSingleFileRequest) (*GetSingleFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleFile not implemented")
}
func (UnimplementedFileServiceServer) UploadSingleFile(context.Context, *UploadSingleFileRequest) (*UploadSingleFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSingleFile not implemented")
}
func (UnimplementedFileServiceServer) DeleteSingleFile(context.Context, *DeleteSingleFileRequest) (*DeleteSingleFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSingleFile not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_GetSingleFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetSingleFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileservice.FileService/GetSingleFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetSingleFile(ctx, req.(*GetSingleFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadSingleFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSingleFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UploadSingleFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileservice.FileService/UploadSingleFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UploadSingleFile(ctx, req.(*UploadSingleFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteSingleFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSingleFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteSingleFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileservice.FileService/DeleteSingleFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteSingleFile(ctx, req.(*DeleteSingleFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileservice.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSingleFile",
			Handler:    _FileService_GetSingleFile_Handler,
		},
		{
			MethodName: "UploadSingleFile",
			Handler:    _FileService_UploadSingleFile_Handler,
		},
		{
			MethodName: "DeleteSingleFile",
			Handler:    _FileService_DeleteSingleFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/file_service.proto",
}
